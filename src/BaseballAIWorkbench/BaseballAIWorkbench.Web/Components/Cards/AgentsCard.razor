@inject ILogger<BaseballCard> logger
@inject BaseballApiClient BaseballApi

<div class="containerFadeIn">
    <div class="card bg-c-lightgray order-card">
        <div class="card-block">
            <div class="row">
                <div class="col-md-9 col-xl-9">
                    <h6 class="form-text"><span><b>Agentic Research & Analysis with Artificial Intelligence</b></span></h6>
                    <small class="form-text text-muted">Selected agents: @(this.GetSelectedAgentNames()) </small>
                    <div class="m-b-0">...<span class="f-right"></span></div>
                </div>
                <div class="col-md-3 col-xl-3">
                    <div class="btnRunAgentAnalysis @(this.RunAnalysisButtonStyle())" @onclick="runAgenticAnalysisClicked"
                    style="font-size:1.25rem;">
                        <i class="fa-solid fa-person-running"></i>
                        Run Agentic Analysis
                    </div>
                </div>
            </div>
            <div class="row">
                <AgentCard @ref="agent1" AgentType="BaseballStatistician"
                OnIsSelectedValueChanged="HandleChildValueChanged">
                </AgentCard>
                <AgentCard @ref="agent2" AgentType="MachineLearningExpert"
                OnIsSelectedValueChanged="HandleChildValueChanged">
                </AgentCard>
                <AgentCard @ref="agent3" AgentType="BaseballEncyclopedia"
                OnIsSelectedValueChanged="HandleChildValueChanged">
                </AgentCard>
            </div> 
            <div class="row">
                <AgenticAnalysisCard @ref="agenticAnalysisCard"
                IsVisible="@hasAgenticAnalysisStarted" AgenticAnalysis="@agenticAnalysis">
                </AgenticAnalysisCard>
            </div>
        </div>
    </div>
</div>

@code {
    private AgentCard agent1;
    private AgentCard agent2;
    private AgentCard agent3;
    private AgenticAnalysisCard agenticAnalysisCard;
    private bool hasAgenticAnalysisStarted = false;
    private string agenticAnalysis = "Running Agentic Analysis...";

    private List<AgentCard> agentCards = new ();
    private List<string> selectedAgents = new();

    [Parameter]
    public MLBBaseballBatter BaseballBatter { get; set; }

    private void HandleChildValueChanged(Agent agent)
    {
        if (agent.IsSelected)
        {
            selectedAgents.Add(agent.AgentType);
        }
        else
        {
            selectedAgents.Remove(agent.AgentType);
        }

        this.StateHasChanged();
    }

    private string GetSelectedAgentNames()
    {
        return string.Join(", ", selectedAgents.Select(a => Agents.GetAgentName(a)));
    }

    private string RunAnalysisButtonStyle()
    {
        if (selectedAgents.Count > 0)
        {
            return string.Empty;
        }
        else
        {
            return "disabled";
        }
    }

    private async Task runAgenticAnalysisClicked()
    {
        agenticAnalysis = "Running Agentic Analysis with...";
        this.hasAgenticAnalysisStarted = true;

        var agenticAnalysisConfig = new AgenticAnalysisConfig
            {
                AgentsToUse = this.selectedAgents,
                BaseballBatter = this.BaseballBatter
            };

        if (agenticAnalysisConfig.AgentsToUse.Count > 1)
        {
            agenticAnalysis += "multiple agents selected";
        }
        else if (agenticAnalysisConfig.AgentsToUse.Count == 1)
        {
            agenticAnalysis += "a single agent selected";
            this.agenticAnalysis = await BaseballApi.GetBaseballPlayerAnalysis(agenticAnalysisConfig);
        }
        this.StateHasChanged();
    }
}
