@page "/"
@namespace BaseballMachineLearningWorkbench.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Baseball ML Workbench</title>
    <meta name="description" content="The Baseball Machine Learning Workbench is an interactive web application. Explore various analytics, decision intelligence & Machine Intelligence techniques using historical baseball data.">
    <meta name="keywords" content="Machine Learning, Baseball, Machine Intelligence, Baseball Anlaytics, Analytics, Decision Analysis, Decision Intelligence">
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <!-- ASYNC LOAD OF CSS -->
    <link href="~/css/open-iconic/font/css/open-iconic-bootstrap.min.css" rel="stylesheet" media="print" onload="this.media='all'" />
    <!-- Added for Blazored -->
    <link href="_content/Blazored.Typeahead/blazored-typeahead.css" rel="stylesheet" media="print" onload="this.media='all'" />
    <!-- Added for FontAwesome -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" media="print" onload="this.media='all'" />
</head>
<body>
    <app>
        @(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered))
    </app>

    @* Server-Side Blazor js *@
    <script src="_framework/blazor.server.js"></script>
    @* Added for Blazored TypeAhead *@
    <script src="_content/Blazored.Typeahead/blazored-typeahead.js"></script>

    @* Added for Blazor keep alive *@
    <style>
        #components-reconnect-modal {
            display: none !important;
        }
    </style>
    @* Old code added to improve server-side Blazor connections *@
    @*<script>
        new MutationObserver(() => {
            console.log("Blazor connection from client re-established.");
            document.querySelector('#components-reconnect-modal') && location.reload()
        }
        ).observe(document.body, { childList: true }
        );
    </script>*@
    @*<script>
            // Wait until a 'reload' button appears
            new MutationObserver((mutations, observer) => {
                if (document.querySelector('#components-reconnect-modal h5 a')) {
                    // Now every 10 seconds, see if the server appears to be back, and if so, reload
                    async function attemptReload() {
                        await fetch(''); // Check the server really is back
                        location.reload();
                    }
                    observer.disconnect();
                    attemptReload();
                    setInterval(attemptReload, 10000);
                }
            }).observe(document.body, { childList: true, subtree: true });
    </script>*@
</body>
</html>
